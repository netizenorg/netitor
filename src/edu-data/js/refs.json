{
  "Infinity": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a>",
      "text": "Infinity"
    },
    "description": {
      "html": "The global property <code><strong>Infinity</strong></code> is a numeric value representing infinity.",
      "text": "The global property Infinity is a numeric value representing infinity."
    }
  },
  "NaN": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a>",
      "text": "NaN"
    },
    "description": {
      "html": "The global <code><strong>NaN</strong></code> property is a value representing Not-A-Number.&#xA0;&#xA0;",
      "text": "The global NaN property is a value representing Not-A-Number.  "
    }
  },
  "undefined": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a>",
      "text": "undefined"
    },
    "description": {
      "html": "The global <code><strong>undefined</strong></code> property represents the primitive value &lt;<code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Undefined\">undefined</a></code>. It is one of JavaScript&apos;s <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive types</a>.",
      "text": "The global undefined property represents the primitive value <undefined. It is one of JavaScript's primitive types."
    }
  },
  "globalThis": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a>",
      "text": "globalThis"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The global <code><strong>globalThis</strong></code> property contains the global <code>this</code> value, which is akin to the global object.</span>",
      "text": "The global globalThis property contains the global this value, which is akin to the global object."
    }
  },
  "eval": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a>",
      "text": "eval()"
    },
    "description": {
      "html": "<strong>Warning:</strong> Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use <code>eval()</code>. See <a target=\"_blank\" href=\"#Never_use_eval!\">Never use eval()!</a>, below.",
      "text": "Warning: Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use eval(). See Never use eval()!, below."
    }
  },
  "isFinite": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a>",
      "text": "isFinite()"
    },
    "description": {
      "html": "The global <code><strong>isFinite()</strong></code> function determines whether the passed value is a finite number. If &#xA0;needed, the parameter is first converted to a number.",
      "text": "The global isFinite() function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number."
    }
  },
  "isNaN": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a>",
      "text": "isNaN()"
    },
    "description": {
      "html": "The <code><strong>isNaN()</strong></code> function determines whether a value is <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> or not. Note,&#xA0;coercion inside the <code>isNaN</code> function has <a target=\"_blank\" href=\"#Description\">interesting</a> rules; you may alternatively want to use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a>, as defined in ECMAScript 2015.",
      "text": "The isNaN() function determines whether a value is NaN or not. Note, coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN(), as defined in ECMAScript 2015."
    }
  },
  "parseFloat": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a>",
      "text": "parseFloat()"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <code><strong>parseFloat()</strong></code> function parses an argument (converting it to a string first if needed) and returns a floating point number.</span>",
      "text": "The parseFloat() function parses an argument (converting it to a string first if needed) and returns a floating point number."
    }
  },
  "parseInt": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a>",
      "text": "parseInt()"
    },
    "description": {
      "html": "The <code><strong>parseInt()</strong></code> function parses a string argument and returns an integer of the specified <a class=\"external\" target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Radix\" rel=\"noopener\">radix</a> (the base in mathematical numeral systems).",
      "text": "The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems)."
    }
  },
  "decodeURI": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a>",
      "text": "decodeURI()"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <code><strong>decodeURI()</strong></code> function decodes a Uniform Resource Identifier (URI) previously created by <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a> or by a similar routine.</span>",
      "text": "The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or by a similar routine."
    }
  },
  "decodeURIComponent": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a>",
      "text": "decodeURIComponent()"
    },
    "description": {
      "html": "The <code><strong>decodeURIComponent()</strong></code> function decodes a Uniform Resource Identifier (URI) component previously created by <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent</code></a> or by a similar routine.",
      "text": "The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine."
    }
  },
  "encodeURI": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a>",
      "text": "encodeURI()"
    },
    "description": {
      "html": "The <code><strong>encodeURI()</strong></code> function encodes a <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).",
      "text": "The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)."
    }
  },
  "encodeURIComponent": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a>",
      "text": "encodeURIComponent()"
    },
    "description": {
      "html": "The <code><strong>encodeURIComponent()</strong></code> function encodes a <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two &quot;surrogate&quot; characters).",
      "text": "The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)."
    }
  },
  "Object": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a>",
      "text": "Object"
    },
    "description": {
      "html": "The <code><strong>Object</strong></code> class represents one of <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">JavaScript&apos;s data types</a>. It is used to store various keyed collections and more complex entities. Objects can be created using the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>Object()</code></a> constructor or the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer / literal syntax</a>.",
      "text": "The Object class represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax."
    }
  },
  "Function": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a>",
      "text": "Function"
    },
    "description": {
      "html": "Every JavaScript function is actually a <code>Function</code> object. This can be seen with the code <code>(function(){}).constructor === Function</code>, which returns true.",
      "text": "Every JavaScript function is actually a Function object. This can be seen with the code (function(){}).constructor === Function, which returns true."
    }
  },
  "Boolean": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>",
      "text": "Boolean"
    },
    "description": {
      "html": "The <strong><code>Boolean</code></strong> object is an object wrapper for a boolean value.",
      "text": "The Boolean object is an object wrapper for a boolean value."
    }
  },
  "Symbol": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a>",
      "text": "Symbol"
    },
    "description": {
      "html": "The data type&#xA0;<strong>symbol</strong> is a <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive data type</a>. The <code>Symbol()</code> function returns a value of type <strong>symbol</strong>, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax &quot;<code>new Symbol()</code>&quot;. &#xA0;",
      "text": "The data type symbol is a primitive data type. The Symbol() function returns a value of type symbol, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax \"new Symbol()\".  "
    }
  },
  "Error": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a>",
      "text": "Error"
    },
    "description": {
      "html": "<code>Error</code> objects are thrown when runtime errors occur. The <code>Error</code> object can also be used as a base object&#xA0;for user-defined exceptions. See below for standard built-in error types.",
      "text": "Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types."
    }
  },
  "AggregateError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a>",
      "text": "AggregateError"
    },
    "description": {
      "html": "The <code><strong>AggregateError</strong></code> object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\"><code>Promise.any()</code></a>, when all promises passed to it reject.",
      "text": "The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject."
    }
  },
  "EvalError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a>",
      "text": "EvalError"
    },
    "description": {
      "html": "The <strong><code>EvalError</code></strong> object indicates an error regarding the global <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function. This exception is not thrown by JavaScript anymore, however the <code>EvalError</code> object remains for compatibility.",
      "text": "The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility."
    }
  },
  "InternalError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a>",
      "text": "InternalError"
    },
    "description": {
      "html": "<strong>Non-standard</strong><br>\n      This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.",
      "text": "Non-standard\n      This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future."
    }
  },
  "RangeError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a>",
      "text": "RangeError"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <code><strong>RangeError</strong></code> object indicates an error when a value is not in the set or range of allowed values.</span>",
      "text": "The RangeError object indicates an error when a value is not in the set or range of allowed values."
    }
  },
  "ReferenceError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a>",
      "text": "ReferenceError"
    },
    "description": {
      "html": "The <code><strong>ReferenceError</strong></code> object represents an error when a non-existent variable is referenced.",
      "text": "The ReferenceError object represents an error when a non-existent variable is referenced."
    }
  },
  "SyntaxError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a>",
      "text": "SyntaxError"
    },
    "description": {
      "html": "The <code><strong>SyntaxError</strong></code> object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.",
      "text": "The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code."
    }
  },
  "TypeError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a>",
      "text": "TypeError"
    },
    "description": {
      "html": "The <code><strong>TypeError</strong></code> object represents an error when an operation could not be performed, typically (but not exclusively) when a&#xA0;value is not of the expected type.",
      "text": "The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type."
    }
  },
  "URIError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a>",
      "text": "URIError"
    },
    "description": {
      "html": "The <code><strong>URIError</strong></code> object represents an error when a global URI handling function was used in a wrong way.",
      "text": "The URIError object represents an error when a global URI handling function was used in a wrong way."
    }
  },
  "Number": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a>",
      "text": "Number"
    },
    "description": {
      "html": "The <strong><code>Number</code></strong> constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the<strong> </strong><strong><code>Number()</code> function</strong>.",
      "text": "The Number constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the Number() function."
    }
  },
  "BigInt": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a>",
      "text": "BigInt"
    },
    "description": {
      "html": "<strong><code>BigInt</code></strong> is a built-in object that provides a way to represent whole numbers larger than 2<sup>53</sup> - 1, which is the largest number JavaScript can reliably represent with the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> primitive and represented by the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> constant. <strong><code>BigInt</code></strong> can be used for arbitrarily large integers.",
      "text": "BigInt is a built-in object that provides a way to represent whole numbers larger than 253 - 1, which is the largest number JavaScript can reliably represent with the Number primitive and represented by the Number.MAX_SAFE_INTEGER constant. BigInt can be used for arbitrarily large integers."
    }
  },
  "Math": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a>",
      "text": "Math"
    },
    "description": {
      "html": "<strong><code>Math</code></strong> is a built-in object that has properties and methods for mathematical constants and functions. It&#x2019;s not a function object.",
      "text": "Math is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object."
    }
  },
  "Date": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a>",
      "text": "Date"
    },
    "description": {
      "html": "<span class=\"seoSummary\">JavaScript <strong><code>Date</code></strong> objects represent a single moment in time in a platform-independent format.</span> <code>Date</code> objects contain a <code>Number</code> that represents milliseconds since 1 January 1970 UTC.",
      "text": "JavaScript Date objects represent a single moment in time in a platform-independent format. Date objects contain a Number that represents milliseconds since 1 January 1970 UTC."
    }
  },
  "String": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a>",
      "text": "String"
    },
    "description": {
      "html": "The <strong><code>String</code></strong> object is used to represent and manipulate a sequence of characters.",
      "text": "The String object is used to represent and manipulate a sequence of characters."
    }
  },
  "RegExp": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a>",
      "text": "RegExp"
    },
    "description": {
      "html": "The <strong><code>RegExp</code></strong> object is used for matching text with a pattern.",
      "text": "The RegExp object is used for matching text with a pattern."
    }
  },
  "Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a>",
      "text": "Array"
    },
    "description": {
      "html": "The JavaScript <strong><code>Array</code></strong> class is a global object that is used in the construction of arrays; which are high-level, list-like objects.",
      "text": "The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects."
    }
  },
  "Int8Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a>",
      "text": "Int8Array"
    },
    "description": {
      "html": "The <strong><code>Int8Array</code></strong> typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object&apos;s methods, or using standard array index syntax (that is, using bracket notation).",
      "text": "The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
    }
  },
  "Uint8Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a>",
      "text": "Uint8Array"
    },
    "description": {
      "html": "The <strong><code>Uint8Array</code></strong> typed array represents an array of 8-bit unsigned integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object&apos;s methods, or using standard array index syntax (that is, using bracket notation).",
      "text": "The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
    }
  },
  "Uint8ClampedArray": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a>",
      "text": "Uint8ClampedArray"
    },
    "description": {
      "html": "The <strong><code>Uint8ClampedArray</code></strong> typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer&#xA0;will be set. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object&apos;s methods, or using standard array index syntax (that is, using bracket notation).",
      "text": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
    }
  },
  "Int16Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a>",
      "text": "Int16Array"
    },
    "description": {
      "html": "The <strong><code>Int16Array</code></strong> typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object&apos;s methods, or using standard array index syntax (that is, using bracket notation).",
      "text": "The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
    }
  },
  "Uint16Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a>",
      "text": "Uint16Array"
    },
    "description": {
      "html": "The <strong><code>Uint16Array</code></strong> typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object&apos;s methods, or using standard array index syntax (that is, using bracket notation).",
      "text": "The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
    }
  },
  "Int32Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a>",
      "text": "Int32Array"
    },
    "description": {
      "html": "The <strong><code>Int32Array</code></strong> typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object&apos;s methods, or using standard array index syntax (that is, using bracket notation).",
      "text": "The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
    }
  },
  "Uint32Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a>",
      "text": "Uint32Array"
    },
    "description": {
      "html": "The <strong><code>Uint32Array</code></strong> typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object&apos;s methods, or using standard array index syntax (that is, using bracket notation).",
      "text": "The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
    }
  },
  "Float32Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a>",
      "text": "Float32Array"
    },
    "description": {
      "html": "The <strong><code>Float32Array</code></strong> typed array represents an array of 32-bit floating point numbers (corresponding to the C <code>float</code> data type) in the platform byte order. If control over byte order is needed, use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object&apos;s methods, or using standard array index syntax (that is, using bracket notation).",
      "text": "The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
    }
  },
  "Float64Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a>",
      "text": "Float64Array"
    },
    "description": {
      "html": "The <strong><code>Float64Array</code></strong> typed array represents an array of 64-bit floating point numbers (corresponding to the C <code>double</code> data type) in the platform byte order. If control over byte order is needed, use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object&apos;s methods, or using standard array index syntax (that is, using bracket notation).",
      "text": "The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation)."
    }
  },
  "BigInt64Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a>",
      "text": "BigInt64Array"
    },
    "description": {
      "html": "The <strong><code>BigInt64Array</code></strong> typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object&apos;s methods, or by using standard array index syntax (that is, using bracket notation).",
      "text": "The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation)."
    }
  },
  "BigUint64Array": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a>",
      "text": "BigUint64Array"
    },
    "description": {
      "html": "The <strong><code>BigUint64Array</code></strong> typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object&apos;s methods, or by using standard array index syntax (that is, using bracket notation).",
      "text": "The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation)."
    }
  },
  "Map": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a>",
      "text": "Map"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>Map</code></strong> object holds key-value pairs and remembers the original insertion order of the keys.</span> Any value (both objects and <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive values</a>) may be used as either a key or a value.",
      "text": "The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value."
    }
  },
  "Set": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a>",
      "text": "Set"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>Set</code></strong> object lets you store unique values of any type, whether <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive values</a> or object references.</span>",
      "text": "The Set object lets you store unique values of any type, whether primitive values or object references."
    }
  },
  "WeakMap": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a>",
      "text": "WeakMap"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>WeakMap</code></strong> object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</span>",
      "text": "The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values."
    }
  },
  "WeakSet": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a>",
      "text": "WeakSet"
    },
    "description": {
      "html": "The <strong><code>WeakSet</code></strong> object lets you store weakly held <em>objects</em> in a collection.",
      "text": "The WeakSet object lets you store weakly held objects in a collection."
    }
  },
  "ArrayBuffer": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a>",
      "text": "ArrayBuffer"
    },
    "description": {
      "html": "The <strong><code>ArrayBuffer</code></strong> object is used to represent a generic, fixed-length raw binary data buffer.",
      "text": "The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer."
    }
  },
  "SharedArrayBuffer": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a>",
      "text": "SharedArrayBuffer"
    },
    "description": {
      "html": "The <strong><code>SharedArrayBuffer</code></strong> object is used to represent a generic, fixed-length raw binary data buffer, similar to the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object, but in a way that they can be used to create views on shared memory. Unlike an <code>ArrayBuffer</code>, a <code>SharedArrayBuffer</code> cannot become detached.",
      "text": "The SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached."
    }
  },
  "Atomics": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a>",
      "text": "Atomics"
    },
    "description": {
      "html": "The <strong><code>Atomics</code></strong> object provides atomic operations as static methods. They are used with <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> and <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> objects.",
      "text": "The Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer and ArrayBuffer objects."
    }
  },
  "DataView": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a>",
      "text": "DataView"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>DataView</code></strong> view provides a low-level interface for reading and writing multiple number types in a binary <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, without having to care about the platform&apos;s <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Endianness\">endianness</a>.</span>",
      "text": "The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness."
    }
  },
  "JSON": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a>",
      "text": "JSON"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>JSON</code></strong> object contains methods for parsing <a class=\"external\" target=\"_blank\" href=\"https://json.org/\" rel=\"noopener\">JavaScript Object Notation</a> (<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/JSON\">JSON</a>) and converting values to JSON. It can&apos;t be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.</span>",
      "text": "The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own."
    }
  },
  "Promise": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>",
      "text": "Promise"
    },
    "description": {
      "html": "The <strong><code>Promise</code></strong> object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.",
      "text": "The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value."
    }
  },
  "Generator": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a>",
      "text": "Generator"
    },
    "description": {
      "html": "The <code><strong>Generator</strong></code> object is returned by a <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">generator function</a> and it conforms to both the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">iterable protocol</a> and the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\">iterator protocol</a>.",
      "text": "The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol."
    }
  },
  "GeneratorFunction": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a>",
      "text": "GeneratorFunction"
    },
    "description": {
      "html": "The <strong><code>GeneratorFunction</code> constructor</strong> creates a new <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">generator function</a> object. In JavaScript, every generator function is actually a <code>GeneratorFunction</code> object.",
      "text": "The GeneratorFunction constructor creates a new generator function object. In JavaScript, every generator function is actually a GeneratorFunction object."
    }
  },
  "AsyncFunction": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a>",
      "text": "AsyncFunction"
    },
    "description": {
      "html": "The <strong><code>AsyncFunction</code> constructor</strong> creates a new <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a> object. In JavaScript, every asynchronous function is actually an <code>AsyncFunction</code> object.",
      "text": "The AsyncFunction constructor creates a new async function object. In JavaScript, every asynchronous function is actually an AsyncFunction object."
    }
  },
  "Reflect": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a>",
      "text": "Reflect"
    },
    "description": {
      "html": "<span class=\"seoSummary\"><strong>Reflect</strong> is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler\">proxy handlers</a>. <code>Reflect</code> is not a function object, so it&apos;s not constructible.</span>",
      "text": "Reflect is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of proxy handlers. Reflect is not a function object, so it's not constructible."
    }
  },
  "Proxy": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a>",
      "text": "Proxy"
    },
    "description": {
      "html": "The <code>Proxy</code> object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.",
      "text": "The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object."
    }
  },
  "Intl": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a>",
      "text": "Intl"
    },
    "description": {
      "html": "The <strong><code>Intl</code></strong> object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The <strong><code>Intl</code></strong> object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.",
      "text": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The Intl object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions."
    }
  },
  "Intl.Collator": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator\">Intl.Collator</a>",
      "text": "Intl.Collator"
    },
    "description": {
      "html": "The <strong><code>Intl.Collator</code></strong> objects enable language sensitive string comparison.",
      "text": "The Intl.Collator objects enable language sensitive string comparison."
    }
  },
  "Intl.DateTimeFormat": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\">Intl.DateTimeFormat</a>",
      "text": "Intl.DateTimeFormat"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>Intl.DateTimeFormat</code></strong> object is a constructor for objects that enable language-sensitive date and time formatting.</span>&#xA0;",
      "text": "The Intl.DateTimeFormat object is a constructor for objects that enable language-sensitive date and time formatting. "
    }
  },
  "Intl.DisplayNames": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\">Intl.DisplayNames</a>",
      "text": "Intl.DisplayNames"
    },
    "description": {
      "html": "The <strong><code>Intl.DisplayNames</code></strong> object is a constructor for objects that enables the consistent translation of language, region and script display names.",
      "text": "The Intl.DisplayNames object is a constructor for objects that enables the consistent translation of language, region and script display names."
    }
  },
  "Intl.ListFormat": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\">Intl.ListFormat</a>",
      "text": "Intl.ListFormat"
    },
    "description": {
      "html": "The <strong><code>Intl.ListFormat</code></strong> object is a constructor for objects that enable language-sensitive list formatting.",
      "text": "The Intl.ListFormat object is a constructor for objects that enable language-sensitive list formatting."
    }
  },
  "Intl.Locale": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale\">Intl.Locale</a>",
      "text": "Intl.Locale"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>Intl.Locale</code></strong> object is a standard built-in property of the Intl object that represents a Unicode locale identifier.</span>",
      "text": "The Intl.Locale object is a standard built-in property of the Intl object that represents a Unicode locale identifier."
    }
  },
  "Intl.NumberFormat": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\">Intl.NumberFormat</a>",
      "text": "Intl.NumberFormat"
    },
    "description": {
      "html": "The <strong><code>Intl.NumberFormat</code></strong> object is a constructor for objects that enable language sensitive number formatting.",
      "text": "The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting."
    }
  },
  "Intl.PluralRules": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\">Intl.PluralRules</a>",
      "text": "Intl.PluralRules"
    },
    "description": {
      "html": "The <strong><code>Intl.PluralRules</code></strong> object enables plural-sensitive formatting and plural-related language rules.",
      "text": "The Intl.PluralRules object enables plural-sensitive formatting and plural-related language rules."
    }
  },
  "Intl.RelativeTimeFormat": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\">Intl.RelativeTimeFormat</a>",
      "text": "Intl.RelativeTimeFormat"
    },
    "description": {
      "html": "The <strong><code>Intl.RelativeTimeFormat</code></strong> object enables language-sensitive relative time formatting.",
      "text": "The Intl.RelativeTimeFormat object enables language-sensitive relative time formatting."
    }
  },
  "WebAssembly": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly\">WebAssembly</a>",
      "text": "WebAssembly"
    },
    "description": {
      "html": "The <strong><code>WebAssembly</code></strong> JavaScript object acts as the namespace for all <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/WebAssembly\">WebAssembly</a>-related functionality.",
      "text": "The WebAssembly JavaScript object acts as the namespace for all WebAssembly-related functionality."
    }
  },
  "WebAssembly.Module": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\">WebAssembly.Module</a>",
      "text": "WebAssembly.Module"
    },
    "description": {
      "html": "<span class=\"seoSummary\">A <strong><code>WebAssembly.Module</code></strong> object contains stateless WebAssembly code that has already been compiled by the browser &#x2014; this can be efficiently <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\">shared with Workers</a>, and instantiated multiple times. </span>",
      "text": "A WebAssembly.Module object contains stateless WebAssembly code that has already been compiled by the browser — this can be efficiently shared with Workers, and instantiated multiple times. "
    }
  },
  "WebAssembly.Instance": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance\">WebAssembly.Instance</a>",
      "text": "WebAssembly.Instance"
    },
    "description": {
      "html": "A <strong><code>WebAssembly.Instance</code></strong> object is a stateful, executable instance of a <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a>. <code>Instance</code> objects contain all the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a> that allow calling into WebAssembly code from JavaScript.",
      "text": "A WebAssembly.Instance object is a stateful, executable instance of a WebAssembly.Module. Instance objects contain all the Exported WebAssembly functions that allow calling into WebAssembly code from JavaScript."
    }
  },
  "WebAssembly.Memory": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory\">WebAssembly.Memory</a>",
      "text": "WebAssembly.Memory"
    },
    "description": {
      "html": "The <code><strong>WebAssembly.Memory</strong></code> object is a resizable <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></code> that holds the raw bytes of memory accessed by a WebAssembly <code>Instance</code>.",
      "text": "The WebAssembly.Memory object is a resizable ArrayBuffer or SharedArrayBuffer that holds the raw bytes of memory accessed by a WebAssembly Instance."
    }
  },
  "WebAssembly.Table": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\">WebAssembly.Table</a>",
      "text": "WebAssembly.Table"
    },
    "description": {
      "html": "The <code><strong>WebAssembly.Table()</strong></code> object is a JavaScript wrapper object &#x2014; an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.",
      "text": "The WebAssembly.Table() object is a JavaScript wrapper object — an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly."
    }
  },
  "WebAssembly.CompileError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError\">WebAssembly.CompileError</a>",
      "text": "WebAssembly.CompileError"
    },
    "description": {
      "html": "The <code><strong>WebAssembly.CompileError</strong></code> object indicates an error during WebAssembly decoding or validation.",
      "text": "The WebAssembly.CompileError object indicates an error during WebAssembly decoding or validation."
    }
  },
  "WebAssembly.LinkError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError\">WebAssembly.LinkError</a>",
      "text": "WebAssembly.LinkError"
    },
    "description": {
      "html": "The <code><strong>WebAssembly.LinkError</strong></code> object indicates an error during module instantiation (besides <a class=\"external\" target=\"_blank\" href=\"http://webassembly.org/docs/semantics/#traps\" rel=\"noopener\">traps</a> from the start function).",
      "text": "The WebAssembly.LinkError object indicates an error during module instantiation (besides traps from the start function)."
    }
  },
  "WebAssembly.RuntimeError": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError\">WebAssembly.RuntimeError</a>",
      "text": "WebAssembly.RuntimeError"
    },
    "description": {
      "html": "The <code><strong>WebAssembly.RuntimeError</strong></code> object is the error type that is thrown whenever WebAssembly specifies a <a class=\"external\" target=\"_blank\" href=\"http://webassembly.org/docs/semantics/#traps\" rel=\"noopener\">trap</a>.",
      "text": "The WebAssembly.RuntimeError object is the error type that is thrown whenever WebAssembly specifies a trap."
    }
  },
  "break": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\">break</a>",
      "text": "break"
    },
    "description": {
      "html": "The <strong>break statement</strong> terminates the current loop, <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"><code>switch</code></a>, or <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\"><code>label</code></a> statement and transfers program control to the statement following the terminated statement.",
      "text": "The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement."
    }
  },
  "continue": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\">continue</a>",
      "text": "continue"
    },
    "description": {
      "html": "The <strong>continue statement</strong> terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.",
      "text": "The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration."
    }
  },
  "if": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">if</a>",
      "text": "if"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>if</code> statement</strong> executes a statement if a specified condition is <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/truthy\">truthy</a>. If the condition is <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/falsy\">falsy</a>, another statement can be executed.</span>",
      "text": "The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed."
    }
  },
  "else": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">if</a>",
      "text": "if"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>if</code> statement</strong> executes a statement if a specified condition is <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/truthy\">truthy</a>. If the condition is <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/falsy\">falsy</a>, another statement can be executed.</span>",
      "text": "The if statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed."
    }
  },
  "switch": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\">switch</a>",
      "text": "switch"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>switch</code> statement</strong> evaluates an <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators\">expression</a>, matching the expression&apos;s value to a <code>case</code> clause, and executes <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements\">statements</a> associated with that <code>case</code>, as well as statements in <code>case</code>s that follow the matching <code>case</code>.</span>",
      "text": "The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case, as well as statements in cases that follow the matching case."
    }
  },
  "throw": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\">throw</a>",
      "text": "throw"
    },
    "description": {
      "html": "The <strong><code>throw</code> statement</strong> throws a user-defined exception. Execution of the current function will stop (the statements after <code>throw</code> won&apos;t be executed), and control will be passed to the first <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>catch</code></a> block in the call stack. If no <code>catch</code> block exists among caller functions, the program will terminate.",
      "text": "The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate."
    }
  },
  "try": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">try</a>",
      "text": "try"
    },
    "description": {
      "html": "The <strong><code>try...catch</code></strong> statement marks a block of statements to try and specifies a response should an exception be thrown.",
      "text": "The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown."
    }
  },
  "catch": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\">try</a>",
      "text": "try"
    },
    "description": {
      "html": "The <strong><code>try...catch</code></strong> statement marks a block of statements to try and specifies a response should an exception be thrown.",
      "text": "The try...catch statement marks a block of statements to try and specifies a response should an exception be thrown."
    }
  },
  "var": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">var</a>",
      "text": "var"
    },
    "description": {
      "html": "The <strong><code>var</code> statement</strong> declares a function-scoped or globally-scoped variable, optionally initializing it to a value.",
      "text": "The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value."
    }
  },
  "let": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a>",
      "text": "let"
    },
    "description": {
      "html": "The <strong><code>let</code></strong> statement declares a block-scoped local variable, optionally initializing it to a value.",
      "text": "The let statement declares a block-scoped local variable, optionally initializing it to a value."
    }
  },
  "const": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a>",
      "text": "const"
    },
    "description": {
      "html": "Constants are block-scoped, much like variables defined using the <code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a></code> keyword. The value of a constant can&apos;t be&#xA0;changed through reassignment, and it can&apos;t be redeclared.",
      "text": "Constants are block-scoped, much like variables defined using the let keyword. The value of a constant can't be changed through reassignment, and it can't be redeclared."
    }
  },
  "function": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function</a>",
      "text": "function"
    },
    "description": {
      "html": "The <strong><code>function</code></strong> keyword can be used to define a function inside an expression.",
      "text": "The function keyword can be used to define a function inside an expression."
    }
  },
  "function*": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*\">function*</a>",
      "text": "function*"
    },
    "description": {
      "html": "The <strong><code>function*</code></strong> keyword can be used to define a generator function inside an expression.",
      "text": "The function* keyword can be used to define a generator function inside an expression."
    }
  },
  "async": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function\">async</a>",
      "text": "async"
    },
    "description": {
      "html": "The <strong><code>async function</code></strong> keyword can be used to define <code>async</code> functions inside expressions.",
      "text": "The async function keyword can be used to define async functions inside expressions."
    }
  },
  "return": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\">return</a>",
      "text": "return"
    },
    "description": {
      "html": "The <strong><code>return</code> statement</strong> ends function execution and specifies a value to be returned to the function caller.",
      "text": "The return statement ends function execution and specifies a value to be returned to the function caller."
    }
  },
  "class": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class\">class</a>",
      "text": "class"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong>class expression</strong> is one way to define a class in ECMAScript 2015. Similar to <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expressions</a>, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. </span>",
      "text": "The class expression is one way to define a class in ECMAScript 2015. Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. "
    }
  },
  "do": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while\">do</a>",
      "text": "do"
    },
    "description": {
      "html": "The <strong><code>do...while</code> statement</strong> creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.",
      "text": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once."
    }
  },
  "while": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\">while</a>",
      "text": "while"
    },
    "description": {
      "html": "The <strong>while statement</strong> creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.",
      "text": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement."
    }
  },
  "for": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">for</a>",
      "text": "for"
    },
    "description": {
      "html": "The <strong>for statement</strong> creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\">block statement</a>) to be executed in the loop.",
      "text": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop."
    }
  },
  "in": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\">in</a>",
      "text": "in"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>in</code> operator</strong> returns <code>true</code> if the specified property is in the specified object or its prototype chain.</span>",
      "text": "The in operator returns true if the specified property is in the specified object or its prototype chain."
    }
  },
  "of": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">of</a>",
      "text": "of"
    },
    "description": {
      "html": "The <strong><code>for...of</code> statement</strong> creates a loop iterating over <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">iterable objects</a>, including: built-in <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>, <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>, array-like objects (e.g., <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> or&#xA0;<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\"><code>NodeList</code></a>), <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>, <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>, <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a>, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object.",
      "text": "The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. It invokes a custom iteration hook with statements to be executed for the value of each distinct property of the object."
    }
  },
  "debugger": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a>",
      "text": "debugger"
    },
    "description": {
      "html": "The <strong>debugger statement</strong> invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.",
      "text": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect."
    }
  },
  "import": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">import</a>",
      "text": "import"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The static <code><strong>import</strong></code> statement is used to import read only live bindings which are <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\">exported</a> by another module. </span>Imported modules are in <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\"><code>strict&#xA0;mode</code></a> whether you declare them as such or not. The <code>import</code> statement cannot be used in embedded scripts unless such script has a <code>type=&quot;module&quot;</code>. Bindings imported are called live bindings because they are updated by the&#xA0;module that exported the binding.",
      "text": "The static import statement is used to import read only live bindings which are exported by another module. Imported modules are in strict mode whether you declare them as such or not. The import statement cannot be used in embedded scripts unless such script has a type=\"module\". Bindings imported are called live bindings because they are updated by the module that exported the binding."
    }
  },
  "label": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\">label</a>",
      "text": "label"
    },
    "description": {
      "html": "The <strong>labeled statement</strong> can be used with <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break\"><code>break</code></a> or <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue\"><code>continue</code></a> statements. It is prefixing a statement with an identifier which you can refer to.",
      "text": "The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to."
    }
  },
  "with": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with\">with</a>",
      "text": "with"
    },
    "description": {
      "html": "The <strong>with statement</strong> extends the scope chain for a statement.",
      "text": "The with statement extends the scope chain for a statement."
    }
  },
  "this": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a>",
      "text": "this"
    },
    "description": {
      "html": "A <strong>function&apos;s <code>this</code> keyword</strong> behaves a little differently in JavaScript compared to other languages. It also has some differences between <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a> and non-strict mode.",
      "text": "A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode."
    }
  },
  "yield": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\">yield</a>",
      "text": "yield"
    },
    "description": {
      "html": "The <code>yield</code> keyword is used to pause and resume a generator function (<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\"><code>function*</code></a> or <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Legacy_generator_function\">legacy generator function</a>).",
      "text": "The yield keyword is used to pause and resume a generator function (function* or legacy generator function)."
    }
  },
  "yield*": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a>",
      "text": "yield*"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>yield*</code> expression</strong> is used to delegate to another <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\"><code>generator</code></a> or iterable object.</span>",
      "text": "The yield* expression is used to delegate to another generator or iterable object."
    }
  },
  "await": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\">await</a>",
      "text": "await"
    },
    "description": {
      "html": "The <code>await</code> operator is used to wait for a <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. It can only be used inside&#xA0;an <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"><code>async function</code></a>.",
      "text": "The await operator is used to wait for a Promise. It can only be used inside an async function."
    }
  },
  "[": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">[</a>",
      "text": "["
    },
    "description": {
      "html": "The JavaScript <strong><code>Array</code></strong> class is a global object that is used in the construction of arrays; which are high-level, list-like objects.",
      "text": "The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects."
    }
  },
  "]": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">[</a>",
      "text": "["
    },
    "description": {
      "html": "The JavaScript <strong><code>Array</code></strong> class is a global object that is used in the construction of arrays; which are high-level, list-like objects.",
      "text": "The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects."
    }
  },
  "{": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">{</a>",
      "text": "{"
    },
    "description": {
      "html": "Objects can be initialized using <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>new Object()</code></a>,&#xA0;<code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a></code>, or using the <em>literal</em> notation (<em>initializer</em> notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (<code>{}</code>).",
      "text": "Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({})."
    }
  },
  "}": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\">{</a>",
      "text": "{"
    },
    "description": {
      "html": "Objects can be initialized using <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>new Object()</code></a>,&#xA0;<code><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create()</a></code>, or using the <em>literal</em> notation (<em>initializer</em> notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (<code>{}</code>).",
      "text": "Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({})."
    }
  },
  "regex": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">regex</a>",
      "text": "regex"
    },
    "description": {
      "html": "The <strong><code>RegExp</code></strong> object is used for matching text with a pattern.",
      "text": "The RegExp object is used for matching text with a pattern."
    }
  },
  "(": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\">(</a>",
      "text": "("
    },
    "description": {
      "html": "The grouping operator <code>( )</code> controls the precedence of evaluation in expressions.",
      "text": "The grouping operator ( ) controls the precedence of evaluation in expressions."
    }
  },
  ")": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\">(</a>",
      "text": "("
    },
    "description": {
      "html": "The grouping operator <code>( )</code> controls the precedence of evaluation in expressions.",
      "text": "The grouping operator ( ) controls the precedence of evaluation in expressions."
    }
  },
  "null": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\">null</a>",
      "text": "null"
    },
    "description": {
      "html": "The value <code>null</code>&#xA0;represents the intentional absence of any object value. It is one of JavaScript&apos;s <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive values</a> and is treated as <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy</a>&#xA0;for boolean operations.",
      "text": "The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values and is treated as falsy for boolean operations."
    }
  },
  "new": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\">new</a>",
      "text": "new"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong><code>new</code> operator</strong> lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.</span>",
      "text": "The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function."
    }
  },
  "new.target": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new%2Etarget",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new%2Etarget\">new.target</a>",
      "text": "new.target"
    },
    "description": {
      "html": "The<strong> <code>new.target</code></strong>&#xA0;pseudo-property lets you detect whether a function or constructor was called using the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\">new</a> operator. In constructors and functions invoked using the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\">new</a> operator, <code>new.target</code> returns a reference to the constructor or function.&#xA0;In normal function calls, <code>new.target</code> is <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "text": "The new.target pseudo-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined."
    }
  },
  "super": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\">super</a>",
      "text": "super"
    },
    "description": {
      "html": "The <strong>super</strong> keyword is used to access and call functions on an object&apos;s parent.",
      "text": "The super keyword is used to access and call functions on an object's parent."
    }
  },
  "...": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">...</a>",
      "text": "..."
    },
    "description": {
      "html": "<strong>Spread syntax</strong> (<code>...</code>) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.",
      "text": "Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected."
    }
  },
  "++": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment\">++</a>",
      "text": "++"
    },
    "description": {
      "html": "The increment operator (<code>++</code>) increments (adds one to) its operand and returns a value.",
      "text": "The increment operator (++) increments (adds one to) its operand and returns a value."
    }
  },
  "--": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement\">--</a>",
      "text": "--"
    },
    "description": {
      "html": "The decrement operator (<code>--</code>) decrements (subtracts one from) its operand and returns a value.",
      "text": "The decrement operator (--) decrements (subtracts one from) its operand and returns a value."
    }
  },
  "delete": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\">delete</a>",
      "text": "delete"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The JavaScript <strong><code>delete</code> operator</strong> removes a property from an object; if no more references to the same property are held, it is eventually released automatically.</span>",
      "text": "The JavaScript delete operator removes a property from an object; if no more references to the same property are held, it is eventually released automatically."
    }
  },
  "void": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\">void</a>",
      "text": "void"
    },
    "description": {
      "html": "The <strong><code>void</code> operator</strong> evaluates the given <code><em>expression</em></code> and then returns <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.",
      "text": "The void operator evaluates the given expression and then returns undefined."
    }
  },
  "typeof": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a>",
      "text": "typeof"
    },
    "description": {
      "html": "The <strong><code>typeof</code></strong> operator returns a string indicating the type of the unevaluated operand.",
      "text": "The typeof operator returns a string indicating the type of the unevaluated operand."
    }
  },
  "+": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition\">+</a>",
      "text": "+"
    },
    "description": {
      "html": "The addition operator (<code>+</code>) produces the sum of numeric operands or string concatenation.",
      "text": "The addition operator (+) produces the sum of numeric operands or string concatenation."
    }
  },
  "-": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction\">-</a>",
      "text": "-"
    },
    "description": {
      "html": "The subtraction operator (<code>-</code>) subtracts the two operands, producing their difference.",
      "text": "The subtraction operator (-) subtracts the two operands, producing their difference."
    }
  },
  "~": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">~</a>",
      "text": "~"
    },
    "description": {
      "html": "The bitwise NOT operator (<code>~</code>) inverts the bits of its operand.",
      "text": "The bitwise NOT operator (~) inverts the bits of its operand."
    }
  },
  "!": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">!</a>",
      "text": "!"
    },
    "description": {
      "html": "The logical NOT (<code>!</code>) operator (logical complement, negation) takes truth to falsity and vice versa. It is typically used with <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> (logical) values. When used with non-Boolean values, it returns <code>false</code> if its single operand can be converted to <code>true</code>; otherwise, returns <code>true</code>.",
      "text": "The logical NOT (!) operator (logical complement, negation) takes truth to falsity and vice versa. It is typically used with Boolean (logical) values. When used with non-Boolean values, it returns false if its single operand can be converted to true; otherwise, returns true."
    }
  },
  "/": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division\">/</a>",
      "text": "/"
    },
    "description": {
      "html": "The division operator (<code>/</code>) produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.",
      "text": "The division operator (/) produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor."
    }
  },
  "*": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication\">*</a>",
      "text": "*"
    },
    "description": {
      "html": "The multiplication operator (<code>*</code>) produces the product of the operands.",
      "text": "The multiplication operator (*) produces the product of the operands."
    }
  },
  "%": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\">%</a>",
      "text": "%"
    },
    "description": {
      "html": "The remainder operator (<code>%</code>) returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.",
      "text": "The remainder operator (%) returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend."
    }
  },
  "**": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation\">**</a>",
      "text": "**"
    },
    "description": {
      "html": "The exponentiation operator (<code>**</code>) returns the result of raising the first operand to the power of the second operand.",
      "text": "The exponentiation operator (**) returns the result of raising the first operand to the power of the second operand."
    }
  },
  "instanceof": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a>",
      "text": "instanceof"
    },
    "description": {
      "html": "The <strong><code>instanceof</code> operator</strong> tests whether the <code>prototype</code> property of a constructor appears anywhere in the prototype chain of an object.",
      "text": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object."
    }
  },
  "<": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than\"><</a>",
      "text": "<"
    },
    "description": {
      "html": "The less than operator (<code>&lt;</code>) returns <code>true</code> if the left operand is less than the right operand, and <code>false</code> otherwise.",
      "text": "The less than operator (<) returns true if the left operand is less than the right operand, and false otherwise."
    }
  },
  ">": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than\">></a>",
      "text": ">"
    },
    "description": {
      "html": "The greater than operator (<code>&gt;</code>) returns <code>true</code> if the left operand is greater than the right operand, and <code>false</code> otherwise.",
      "text": "The greater than operator (>) returns true if the left operand is greater than the right operand, and false otherwise."
    }
  },
  "<=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\"><=</a>",
      "text": "<="
    },
    "description": {
      "html": "The less than or equal operator (<code>&lt;=</code>) returns <code>true</code> if the left operand is less than or equal to the right operand, and <code>false</code> otherwise.",
      "text": "The less than or equal operator (<=) returns true if the left operand is less than or equal to the right operand, and false otherwise."
    }
  },
  ">=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">>=</a>",
      "text": ">="
    },
    "description": {
      "html": "The greater than or equal operator (<code>&gt;=</code>) returns <code>true</code> if the left operand is greater than or equal to the right operand, and <code>false</code> otherwise.",
      "text": "The greater than or equal operator (>=) returns true if the left operand is greater than or equal to the right operand, and false otherwise."
    }
  },
  "==": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">==</a>",
      "text": "=="
    },
    "description": {
      "html": "The equality operator (<code>==</code>) checks whether its two operands are equal, returning a Boolean result. Unlike the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">strict equality</a> operator, it attempts to convert and compare operands that are of different types.",
      "text": "The equality operator (==) checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, it attempts to convert and compare operands that are of different types."
    }
  },
  "!=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\">!=</a>",
      "text": "!="
    },
    "description": {
      "html": "The inequality operator (<code>!=</code>) checks whether its two operands are not equal, returning a Boolean result. Unlike the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">strict inequality</a> operator, it attempts to convert and compare operands that are of different types.",
      "text": "The inequality operator (!=) checks whether its two operands are not equal, returning a Boolean result. Unlike the strict inequality operator, it attempts to convert and compare operands that are of different types."
    }
  },
  "===": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality\">===</a>",
      "text": "==="
    },
    "description": {
      "html": "The strict equality operator (<code>===</code>) checks whether its two operands are equal, returning a Boolean result. Unlike the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality\">equality</a> operator, the strict equality operator always considers operands of different types to be different.",
      "text": "The strict equality operator (===) checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different."
    }
  },
  "!==": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">!==</a>",
      "text": "!=="
    },
    "description": {
      "html": "The strict inequality operator (<code>!==</code>) checks whether its two operands are not equal, returning a Boolean result. Unlike the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality\">inequality</a> operator, the strict inequality operator always considers operands of different types to be different.",
      "text": "The strict inequality operator (!==) checks whether its two operands are not equal, returning a Boolean result. Unlike the inequality operator, the strict inequality operator always considers operands of different types to be different."
    }
  },
  "<<": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift\"><<</a>",
      "text": "<<"
    },
    "description": {
      "html": "The <strong>left shift operator (<code>&lt;&lt;</code>)</strong> shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.",
      "text": "The left shift operator (<<) shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right."
    }
  },
  ">>": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\">>></a>",
      "text": ">>"
    },
    "description": {
      "html": "The <strong>right shift operator (<code>&gt;&gt;</code>)</strong> shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name &quot;sign-propagating&quot;.",
      "text": "The right shift operator (>>) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left. Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name \"sign-propagating\"."
    }
  },
  ">>>": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">>>></a>",
      "text": ">>>"
    },
    "description": {
      "html": "The <strong>unsigned right shift operator (<code>&gt;&gt;&gt;</code>)</strong> (zero-fill right shift) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes <code>0</code>, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.",
      "text": "The unsigned right shift operator (>>>) (zero-fill right shift) shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer."
    }
  },
  "&": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">&</a>",
      "text": "&"
    },
    "description": {
      "html": "The bitwise AND operator (<code>&amp;</code>) returns a <code>1</code> in each bit position for which the corresponding bits of both operands are <code>1</code>s.",
      "text": "The bitwise AND operator (&) returns a 1 in each bit position for which the corresponding bits of both operands are 1s."
    }
  },
  "|": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">|</a>",
      "text": "|"
    },
    "description": {
      "html": "The bitwise OR operator (<code>|</code>) returns a <code>1</code> in each bit position for which the corresponding bits of either or both operands are <code>1</code>s.",
      "text": "The bitwise OR operator (|) returns a 1 in each bit position for which the corresponding bits of either or both operands are 1s."
    }
  },
  "^": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">^</a>",
      "text": "^"
    },
    "description": {
      "html": "The bitwise XOR operator (<code>^</code>) returns a <code>1</code> in each bit position for which the corresponding bits of either but not both operands are <code>1</code>s.",
      "text": "The bitwise XOR operator (^) returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1s."
    }
  },
  "&&": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\">&&</a>",
      "text": "&&"
    },
    "description": {
      "html": "The logical AND (<code>&amp;&amp;</code>) operator (logical conjunction) for a set of operands is true if and only if all of its operands are true. It is typically used with <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> (logical) values. When it is, it returns a Boolean value. However, the <code>&amp;&amp;</code> operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.",
      "text": "The logical AND (&&) operator (logical conjunction) for a set of operands is true if and only if all of its operands are true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the && operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value."
    }
  },
  "||": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\">||</a>",
      "text": "||"
    },
    "description": {
      "html": "The logical OR (<code>||</code>) operator (logical disjunction) for a set of operands is true if and only if one or more of its operands is true. It is typically used with <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> (logical) values. When it is, it returns a Boolean value. However, the <code>||</code> operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.",
      "text": "The logical OR (||) operator (logical disjunction) for a set of operands is true if and only if one or more of its operands is true. It is typically used with Boolean (logical) values. When it is, it returns a Boolean value. However, the || operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value."
    }
  },
  "?": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">?</a>",
      "text": "?"
    },
    "description": {
      "html": "<span class=\"seoSummary\">The <strong>conditional (ternary) operator</strong> is the only JavaScript operator that takes three operands: a condition followed by a question mark (<code>?</code>), then an expression to execute if the condition is <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/truthy\">truthy</a> followed by a colon (<code>:</code>), and finally the expression to execute if the condition is <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/falsy\">falsy</a>.</span> This operator is frequently used as a shortcut for the <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if</code></a> statement.",
      "text": "The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. This operator is frequently used as a shortcut for the if statement."
    }
  },
  "=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment\">=</a>",
      "text": "="
    },
    "description": {
      "html": "The simple assignment operator (<code>=</code>) is used to assign a value to a variable. The assignment operation&#xA0;evaluates to&#xA0;the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables",
      "text": "The simple assignment operator (=) is used to assign a value to a variable. The assignment operation evaluates to the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables"
    }
  },
  "*=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">*=</a>",
      "text": "*="
    },
    "description": {
      "html": "The multiplication assignment operator (<code>*=</code>) multiplies a variable by the value of the right operand and assigns the result to the variable.",
      "text": "The multiplication assignment operator (*=) multiplies a variable by the value of the right operand and assigns the result to the variable."
    }
  },
  "/=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment\">/=</a>",
      "text": "/="
    },
    "description": {
      "html": "The division assignment operator (<code>/=</code>) divides a variable by the value of the right operand and assigns the result to the variable.",
      "text": "The division assignment operator (/=) divides a variable by the value of the right operand and assigns the result to the variable."
    }
  },
  "%=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">%=</a>",
      "text": "%="
    },
    "description": {
      "html": "The remainder assignment operator (<code>%=</code>) divides a variable by the value of the right operand and assigns the remainder to the variable.",
      "text": "The remainder assignment operator (%=) divides a variable by the value of the right operand and assigns the remainder to the variable."
    }
  },
  "+=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">+=</a>",
      "text": "+="
    },
    "description": {
      "html": "The addition assignment operator (<code>+=</code>) adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible.",
      "text": "The addition assignment operator (+=) adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible."
    }
  },
  "-=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">-=</a>",
      "text": "-="
    },
    "description": {
      "html": "The subtraction assignment operator (<code>-=</code>) subtracts the value of the right operand from a variable and assigns the result to the variable.",
      "text": "The subtraction assignment operator (-=) subtracts the value of the right operand from a variable and assigns the result to the variable."
    }
  },
  "<<=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\"><<=</a>",
      "text": "<<="
    },
    "description": {
      "html": "The left shift assignment operator (<code>&lt;&lt;=</code>) moves the specified amount of bits to the left and assigns the result to the variable.",
      "text": "The left shift assignment operator (<<=) moves the specified amount of bits to the left and assigns the result to the variable."
    }
  },
  ">>=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">>>=</a>",
      "text": ">>="
    },
    "description": {
      "html": "The right shift assignment operator (<code>&gt;&gt;=</code>) moves the specified amount of bits to the right and assigns the result to the variable.",
      "text": "The right shift assignment operator (>>=) moves the specified amount of bits to the right and assigns the result to the variable."
    }
  },
  ">>>=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">>>>=</a>",
      "text": ">>>="
    },
    "description": {
      "html": "The unsigned right shift assignment operator (<em><code>&gt;&gt;&gt;=</code></em>) moves the specified amount of bits to the right and assigns the result to the variable.",
      "text": "The unsigned right shift assignment operator (>>>=) moves the specified amount of bits to the right and assigns the result to the variable."
    }
  },
  "&=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">&=</a>",
      "text": "&="
    },
    "description": {
      "html": "The bitwise AND assignment operator (<code>&amp;=</code>) uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.",
      "text": "The bitwise AND assignment operator (&=) uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable."
    }
  },
  "^=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">^=</a>",
      "text": "^="
    },
    "description": {
      "html": "The bitwise XOR assignment operator (<code>^=</code>) uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.",
      "text": "The bitwise XOR assignment operator (^=) uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable."
    }
  },
  "|=": {
    "status": "standard",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment",
    "keyword": {
      "html": "<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">|=</a>",
      "text": "|="
    },
    "description": {
      "html": "The bitwise OR assignment operator (<code>|=</code>) uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.",
      "text": "The bitwise OR assignment operator (|=) uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable."
    }
  }
}